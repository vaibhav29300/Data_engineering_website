"use strict";(self.webpackChunkdata_with_vaibhav=self.webpackChunkdata_with_vaibhav||[]).push([[491],{491:(e,t,a)=>{a.r(t),a.d(t,{default:()=>u});var r=a(43),i=a(323),s=a(986);const l=["title","titleId"];function o(e,t){let{title:a,titleId:i}=e,o=(0,s.A)(e,l);return r.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true","data-slot":"icon",ref:t,"aria-labelledby":i},o),a?r.createElement("title",{id:i},a):null,r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M12 18v-5.25m0 0a6.01 6.01 0 0 0 1.5-.189m-1.5.189a6.01 6.01 0 0 1-1.5-.189m3.75 7.478a12.06 12.06 0 0 1-4.5 0m3.75 2.383a14.406 14.406 0 0 1-3 0M14.25 18v-.192c0-.983.658-1.823 1.508-2.316a7.5 7.5 0 1 0-7.517 0c.85.493 1.509 1.333 1.509 2.316V18"}))}const n=r.forwardRef(o),d=["title","titleId"];function c(e,t){let{title:a,titleId:i}=e,l=(0,s.A)(e,d);return r.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true","data-slot":"icon",ref:t,"aria-labelledby":i},l),a?r.createElement("title",{id:i},a):null,r.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M11.42 15.17 17.25 21A2.652 2.652 0 0 0 21 17.25l-5.877-5.877M11.42 15.17l2.496-3.03c.317-.384.74-.626 1.208-.766M11.42 15.17l-4.655 5.653a2.548 2.548 0 1 1-3.586-3.586l6.837-5.63m5.108-.233c.55-.164 1.163-.188 1.743-.14a4.5 4.5 0 0 0 4.486-6.336l-3.276 3.277a3.004 3.004 0 0 1-2.25-2.25l3.276-3.276a4.5 4.5 0 0 0-6.336 4.486c.091 1.076-.071 2.264-.904 2.95l-.102.085m-1.745 1.437L5.909 7.5H4.5L2.25 3.75l1.5-1.5L7.5 4.5v1.409l4.26 4.26m-1.745 1.437 1.745-1.437m6.615 8.206L15.75 15.75M4.867 19.125h.008v.008h-.008v-.008Z"}))}const m=r.forwardRef(c);var g=a(670),p=a(579);const h=[{id:"personal_portfolio_pipeline",title:"Personal Portfolio Data Pipeline",description:"Collect data from your GitHub, LinkedIn, or blog using APIs, process it, and store it in a simple database (e.g., SQLite or PostgreSQL). Visualize insights like commit frequency or popular blog topics.",tools:["Python (Requests, Pandas)","SQLite/PostgreSQL","Cron/Scheduler","Matplotlib/Seaborn (optional)"],difficulty:"Beginner",tutorialLink:"https://www.example.com/portfolio-pipeline-tutorial"},{id:"twitter_sentiment_analysis",title:"Real-time Twitter Sentiment Analysis",description:"Stream tweets using the Twitter API, perform sentiment analysis on them, and display results on a live dashboard. This project introduces streaming concepts.",tools:["Python (Tweepy)","Kafka/RabbitMQ (for streaming)","NLTK/VADER (sentiment analysis)","Elasticsearch/OpenSearch","Kibana/Grafana (dashboarding)"],difficulty:"Intermediate"},{id:"ecomm_etl_dwh",title:"E-commerce ETL and Data Warehouse",description:"Simulate e-commerce data (orders, customers, products). Design an ETL pipeline to load this data into a data warehouse (e.g., Snowflake, Redshift, or a local PostgreSQL). Create reports and dashboards.",tools:["Python/SQL","Airflow","DBT","Snowflake/Redshift/BigQuery/PostgreSQL","Tableau/PowerBI/Metabase"],difficulty:"Intermediate",tutorialLink:"https://www.example.com/ecommerce-etl-tutorial"},{id:"log_analytics_platform",title:"Log Analytics Platform",description:"Collect, process, and analyze application logs. Build a system to ingest logs, parse them, store them in a searchable format, and create alerts for specific error patterns.",tools:["Fluentd/Logstash","Kafka","Spark Streaming/Flink","Elasticsearch/OpenSearch","Kibana/Grafana"],difficulty:"Advanced"},{id:"iot_data_pipeline",title:"IoT Sensor Data Pipeline",description:"Simulate sensor data from IoT devices. Build a pipeline to ingest this high-volume data, process it in real-time for anomalies or aggregations, and store it for historical analysis.",tools:["MQTT/Kafka","Spark Streaming/Flink/Kinesis Data Analytics","TimescaleDB/InfluxDB","AWS IoT/GCP IoT Core"],difficulty:"Advanced"},{id:"data_lake_query_engine",title:"Simple Data Lake with Query Engine",description:"Set up a data lake using cloud storage (S3/GCS). Ingest various data formats (CSV, JSON, Parquet). Use a query engine like Presto/Trino or Apache Drill to query the data directly.",tools:["AWS S3/Google Cloud Storage","Apache Spark (for data processing/conversion)","Presto/Trino/Drill","Python (for orchestration)"],difficulty:"Advanced"}],u=()=>{const e=e=>{switch(e){case"Beginner":return"bg-green-100 text-green-800 dark:bg-green-700 dark:text-green-200";case"Intermediate":return"bg-yellow-100 text-yellow-800 dark:bg-yellow-700 dark:text-yellow-200";case"Advanced":return"bg-red-100 text-red-800 dark:bg-red-700 dark:text-red-200";default:return"bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200"}};return(0,p.jsxs)("div",{className:"min-h-screen bg-white dark:bg-gray-900 text-gray-800 dark:text-white py-8 sm:py-12 px-4",children:[(0,p.jsx)(i.P.h1,{initial:{opacity:0,y:-30},animate:{opacity:1,y:0},transition:{duration:.6},className:"text-3xl sm:text-4xl font-bold text-center mb-8 sm:mb-12 text-orange-600 dark:text-orange-400",children:"Data Engineering Project Ideas"}),(0,p.jsx)("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8",children:h.map(((t,a)=>(0,p.jsxs)(i.P.div,{initial:{opacity:0,scale:.9},animate:{opacity:1,scale:1},transition:{duration:.4,delay:.1*a},className:"bg-gray-50 dark:bg-gray-800 p-4 sm:p-6 rounded-xl shadow-2xl hover:shadow-orange-500/30 dark:hover:shadow-orange-400/30 transition-shadow duration-300 flex flex-col",children:[(0,p.jsxs)("div",{className:"flex items-start mb-3 sm:mb-4",children:[(0,p.jsx)(n,{className:"h-8 w-8 sm:h-10 sm:w-10 text-orange-500 dark:text-orange-400 mr-3 sm:mr-4 flex-shrink-0 mt-1"}),(0,p.jsxs)("div",{children:[(0,p.jsx)("h2",{className:"text-xl sm:text-2xl font-semibold text-gray-900 dark:text-white mb-1",children:t.title}),(0,p.jsx)("span",{className:"px-2 sm:px-3 py-0.5 sm:py-1 text-xs font-semibold rounded-full ".concat(e(t.difficulty)),children:t.difficulty})]})]}),(0,p.jsx)("p",{className:"text-xs sm:text-sm text-gray-600 dark:text-gray-300 mb-3 sm:mb-4 leading-relaxed flex-grow",children:t.description}),(0,p.jsxs)("div",{className:"mb-3 sm:mb-4",children:[(0,p.jsxs)("h3",{className:"text-sm sm:text-md font-semibold text-gray-700 dark:text-gray-200 mb-1.5 sm:mb-2 flex items-center",children:[(0,p.jsx)(m,{className:"h-4 w-4 sm:h-5 sm:w-5 mr-1.5 sm:mr-2 text-orange-500 dark:text-orange-400"})," Tools Used:"]}),(0,p.jsx)("div",{className:"flex flex-wrap gap-1 sm:gap-2",children:t.tools.map((e=>(0,p.jsx)("span",{className:"bg-orange-100 dark:bg-orange-700 text-orange-800 dark:text-orange-200 text-xs px-1.5 sm:px-2 py-0.5 sm:py-1 rounded-md",children:e},e)))})]}),t.tutorialLink&&(0,p.jsxs)("a",{href:t.tutorialLink,target:"_blank",rel:"noopener noreferrer",className:"inline-flex items-center text-xs sm:text-sm text-blue-500 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium transition-colors mt-auto self-start",children:["Starter Template/Tutorial ",(0,p.jsx)(g.A,{className:"h-3 w-3 sm:h-4 sm:w-4 ml-1"})]})]},t.id)))})]})}},670:(e,t,a)=>{a.d(t,{A:()=>o});var r=a(986),i=a(43);const s=["title","titleId"];function l(e,t){let{title:a,titleId:l}=e,o=(0,r.A)(e,s);return i.createElement("svg",Object.assign({xmlns:"http://www.w3.org/2000/svg",fill:"none",viewBox:"0 0 24 24",strokeWidth:1.5,stroke:"currentColor","aria-hidden":"true","data-slot":"icon",ref:t,"aria-labelledby":l},o),a?i.createElement("title",{id:l},a):null,i.createElement("path",{strokeLinecap:"round",strokeLinejoin:"round",d:"M13.19 8.688a4.5 4.5 0 0 1 1.242 7.244l-4.5 4.5a4.5 4.5 0 0 1-6.364-6.364l1.757-1.757m13.35-.622 1.757-1.757a4.5 4.5 0 0 0-6.364-6.364l-4.5 4.5a4.5 4.5 0 0 0 1.242 7.244"}))}const o=i.forwardRef(l)}}]);
//# sourceMappingURL=491.0f12ac03.chunk.js.map